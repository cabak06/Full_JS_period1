import UserFacade from '../src/facades/userFacade';
import { expect } from "chai";
import { ApiError } from '../src/errors/apiError';
import { bryptAsync, bryptCheckAsync } from '../src/utils/bcrypt-async-helper'
import IGameUser from '../src/interfaces/GameUser'
import { assert } from 'console';

describe("Verify the UserFacade", () => {

  //Exercise --> Fix this to handle password hashing, asynchronously
  beforeEach(async() => {
    const hash: string = await bryptAsync("secret");
    UserFacade.users = [
      { name: "Peter Pan", userName: "pp@b.dk", password: hash, role: "user" },
      { name: "Donald Duck", userName: "dd@b.dk", password: hash, role: "user" },
      { name: "admin", userName: "admin@a.dk", password: hash, role: "admin" }
    ]
  })

})

it("Should Add the user Jan", async () => {
  const newUser = { name: "Jan Olsen", userName: "jo@b.dk", password: "secret", role: "user" }
  try {
    const status = await UserFacade.addUser(newUser);
    const jan = await UserFacade.getUser("jo@b.dk");
    const passwordOK = await bryptCheckAsync("secret", jan.password);
    expect(status).to.be.equal("User was added")
    expect(UserFacade.users.length).to.equal(4)
  } catch (err) {
    expect.fail("Seems like password was not hashed correctly")
  } finally { }
})

it("Should remove the user Peter", async () => {
  try {
    const delete_peter = await UserFacade.deleteUser('pp@b.dk');
    expect(status).to.be.equal("User was deleted");
    expect(UserFacade.users.length).to.equal(2);
  } catch (err) {
  } finally { }
})

it("Should get three users", async () => {
  try{
    const all_users = await UserFacade.getAllUsers();
    expect(all_users.length).to.be.equal(3);
  } catch (err){
  } finally{ }
})

it("Should find Donald Duck", async () => {
  try{
    const get_donald = await UserFacade.getUser('dd@b.dk');
    expect(get_donald.name).to.be.equal('Donald Duck');
    expect(get_donald.role).to.be.equal('user')
  } catch (err){
  } finally{ }
})

it("Should not find xxx.@.b.dk", async () => {
  try{
    const unknown_user = await UserFacade.getUser('xxx.@.b.dk');
    throw new Error('unknown user')
  }catch (err){
    //expect(err instanceof ApiError).to.be.equal(true)
    expect(err.message).to.be.equal("User Not Found");
  }finally{}
})

